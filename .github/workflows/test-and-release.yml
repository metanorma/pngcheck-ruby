name: test-and-release

on:
  push:
    branches: [ main ]
    tags:     [ 'v*' ]
  pull_request:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

env:
  BUNDLER_VER: 2.3.22
# Forcing bundler version to ensure that it is consistent everywhere and
# does not cause bundler gem reinstalls
# bundler/rubygems 2.3.22 is a minimal requirement to support gnu/musl differentiation
# https://github.com/rubygems/rubygems/pull/4488

jobs:
  prepare:
    uses: metanorma/ci/.github/workflows/prepare-rake.yml@main

  test-many:
    name: Test on Ruby ${{ matrix.ruby.version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    needs: prepare
    if: needs.prepare.outputs.push-for-tag != 'true'

    continue-on-error: ${{ matrix.ruby.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby.version }}
          rubygems: ${{ matrix.ruby.rubygems }}
          bundler: ${{ env.BUNDLER_VER }}
          bundler-cache: true

      # libpng is install into MSys environmtn whis is installed by setup-ruby
      - name: Install windows tools for Ruby < 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby != '3.1'
        run: pacman --noconfirm -S mingw-w64-x86_64-libpng

      - name: Install windows tools for Ruby = 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby == '3.1'
        run: pacman --noconfirm -S mingw-w64-ucrt-x86_64-libpng

      - run: bundle exec rake spec

  test-alpine:
    name: Test on alpine-latest
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - run: gem install bundler:${{ env.BUNDLER_VER }} --no-document
    - run: bundle install

    - run: bundle exec rake spec

# ----- Packaging -----
  package-many:
    name: Package ${{ matrix.os }}, ${{ matrix.ruby }}, ${{ matrix.platform }}
    needs: test-many
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: any
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
          - os: ubuntu-latest
            platform: x86_64-linux
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
          - os: windows-latest
            platform: x64-mingw32
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
          - os: windows-latest
            platform: x64-mingw-ucrt
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
          - os: macos-latest
            platform: x86_64-darwin
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
          - os: ubuntu-latest
            platform: aarch64-linux
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
          - os: macos-latest
            platform: arm64-darwin
            ruby: ${{ needs.prepare.outputs.default-ruby-version }}
    steps:
      - uses: actions/checkout@v3

      - name: Install linux-aarch64 tools
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.platform, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu libarchive-tools

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler: ${{ env.BUNDLER_VER }}
          bundler-cache: true

      - name: Install windows tools for Ruby < 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby != '3.1'
        run: pacman --noconfirm -S mingw-w64-x86_64-libpng

      - name: Install windows tools for Ruby = 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby == '3.1'
        run: pacman --noconfirm -S mingw-w64-ucrt-x86_64-libpng

      - run: bundle exec rake gem:native:${{ matrix.platform }}

      - uses: actions/upload-artifact@v3
        with:
          name: pkg
          path: pkg/*.gem

  package-linux-musl-x86_64:
    name: Package linux-musl-x86_64
    needs: test-alpine
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - run: |
        gem install bundler:${{ env.BUNDLER_VER }} --no-document
        bundle install
        bundle exec rake gem:native:x86_64-linux-musl

    - uses: actions/upload-artifact@v3
      with:
        name: pkg
        path: pkg/*.gem

  package-linux-musl-aarch64:
    name: Package linux-musl-aarch64
    needs: test-alpine
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

# https://github.com/marketplace/actions/run-on-architecture
    - uses: uraimo/run-on-arch-action@v2
      name: Run commands
      id: runcmd
      with:
        arch: aarch64
        distro: alpine_latest
        # Not required, but speeds up builds
        githubToken: ${{ github.token }}
        dockerRunArgs: --volume "${PWD}:/_a"
        install: apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf
        run: |
          cd /_a
          gem install bundler:${{ env.BUNDLER_VER }} --no-document
          bundle install
          bundle exec rake gem:native:aarch64-linux-musl

    - uses: actions/upload-artifact@v3
      with:
        name: pkg
        path: pkg/*.gem

# ----- Test packages with native extensions -----
  test-binary-many:
    name: Test binary package on Ruby ${{ matrix.ruby.version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    needs: [prepare, package-many]
    if: needs.prepare.outputs.push-for-tag != 'true'

    continue-on-error: ${{ matrix.ruby.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v3

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby.version }}
        rubygems: ${{ matrix.ruby.rubygems }}
        bundler: ${{ env.BUNDLER_VER }}
        bundler-cache: false

    - uses: actions/download-artifact@v3
      with:
        name: pkg
        path: pkg

    - name: Install binary gem
      run: |
        gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")-$(ruby -e "puts RUBY_PLATFORM.sub(/darwin\d{2}$/, 'darwin')").gem
# MacOS with have something like arm64-darwin19, others just aarch64-linux

    - name: Test
      shell: bash
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"
# For some reason powershell gets crazy with the line above

  test-binary-alpine:
    name: Test binary package on alpine-latest
    needs:  [ package-linux-musl-x86_64, package-linux-musl-aarch64 ]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: apk --no-cache --upgrade add git ruby-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: pkg
        path: pkg

    - run: gem install bundler:${{ env.BUNDLER_VER }} --no-document
    - name: Install binary gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")-$(ruby -e "puts RUBY_PLATFORM").gem

    - name: Test
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  test-ruby-many:
    name: Test platform package on Ruby ${{ matrix.ruby.version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    needs: [prepare, package-many]
    if: needs.prepare.outputs.push-for-tag != 'true'

    continue-on-error: ${{ matrix.ruby.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v3

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby.version }}
        rubygems: ${{ matrix.ruby.rubygems }}
        bundler: ${{ env.BUNDLER_VER }}
        bundler-cache: false

    - uses: actions/download-artifact@v3
      with:
        name: pkg
        path: pkg

    - run: gem install bundler:${{ env.BUNDLER_VER }} --no-document
    - name: Install gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION").gem

    - name: Test
      shell: bash
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  test-ruby-alpine:
    name: Test ruby platform package on alpine-latest
    needs: package-many
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev build-base autoconf zlib-dev

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: pkg
        path: pkg

    - run: gem install bundler:${{ env.BUNDLER_VER }} --no-document
    - name: Install ruby gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION").gem

    - name: Test
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  release:
    name: Release gem
    needs: [ test-binary-many, test-binary-alpine, test-ruby-many, test-ruby-alpine ]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: pkg
        path: pkg

    - uses: actions-mn/gem-release@main
      with:
        api-key: ${{ secrets.METANORMA_CI_RUBYGEMS_API_KEY }}
        release-command: |
          for gem in pkg/*.gem; do gem push -V $gem; done
