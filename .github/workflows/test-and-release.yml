name: test-and-release

on:
  push:
    branches: [ main ]
    tags:     [ 'v*' ]
  pull_request:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

jobs:
  test:
    name: Test on Ruby ${{ matrix.ruby }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        ruby: [ '2.7', '3.0', '3.1' ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: false

# libpng is install into MSys environmtn whis is installed by setup-ruby
      - name: Install windows tools for Ruby < 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby != '3.1'
        run: pacman --noconfirm -S mingw-w64-x86_64-libpng

      - name: Install windows tools for Ruby = 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby == '3.1'
        run: pacman --noconfirm -S mingw-w64-ucrt-x86_64-libpng

      - run: bundle install
      - run: bundle exec rake spec

  package:
    name: Package ${{ matrix.os }}, ${{ matrix.ruby }}, ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: any
            ruby: '2.7'
          - os: ubuntu-latest
            platform: x86_64-linux
            ruby: '2.7'
          - os: windows-latest
            platform: x64-mingw32
            ruby: '2.7'
          - os: windows-latest
            platform: x64-mingw-ucrt
            ruby: '3.1'
          - os: macos-latest
            platform: x86_64-darwin
            ruby: '2.7'
          - os: ubuntu-latest
            platform: aarch64-linux
            ruby: '2.7'
          - os: macos-latest
            platform: arm64-darwin
            ruby: '2.7'
    steps:
      - uses: actions/checkout@v3

      - name: Install linux-aarch64 tools
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.platform, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu libarchive-tools

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: false

      - name: Install windows tools for Ruby < 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby != '3.1'
        run: pacman --noconfirm -S mingw-w64-x86_64-libpng

      - name: Install windows tools for Ruby = 3.1
        if: matrix.os == 'windows-latest' && matrix.ruby == '3.1'
        run: pacman --noconfirm -S mingw-w64-ucrt-x86_64-libpng

      - run: bundle install
      - run: bundle exec rake gem:native:${{ matrix.platform }}

      - uses: actions/upload-artifact@v2
        with:
          name: pkg
          path: pkg/*.gem

  test-build-binary:
    needs: Package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        ruby: [ '2.7', '3.0', '3.1' ]

    steps:
    - uses: actions/checkout@v3

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: false

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Install binary gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")-$(ruby -e "puts RUBY_PLATFORM.sub(/darwin\d{2}$/, 'darwin')").gem
# MacOS with have something like arm64-darwin19, others just aarch64-linux

    - name: Test
      shell: bash
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"
# For some reason powershell gets crazy with the line above

  test-build-any:
    needs: Package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        ruby: [ '2.7', '3.0', '3.1' ]

    steps:
    - uses: actions/checkout@v3

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: false

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Install gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION").gem

    - name: Test
      shell: bash
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  test-alpine:
    name: Test on alpine-latest
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - run: gem install bundle
    - run: bundle install

    - run: bundle exec rake spec

  package-alpine:
    name: Package on alpine-latest
    needs: test-alpine
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - run: |
        gem install bundle
        bundle install
        bundle exec rake gem:native:x86_64-linux-musl
        bundle exec rake gem:native:any

    - uses: actions/upload-artifact@v2
      with:
        name: pkg
        path: pkg/*.gem

  test-binary-alpine:
    name: Test binary package on alpine-latest
    needs: package-alpine
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Install binary gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")-$(ruby -e "puts RUBY_PLATFORM").gem

    - name: Test
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  test-ruby-alpine:
    name: Test ruby platform package on alpine-latest
    needs: package-alpine
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev build-base autoconf zlib-dev

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Install ruby gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION").gem

    - name: Test
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  release:
    name: Release gem
    needs: [ test, test-build-binary, test-build-any, test-binary-alpine, test-ruby-alpine ]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Publish to rubygems.org
      env:
        RUBYGEMS_API_KEY: ${{secrets.METANORMA_CI_RUBYGEMS_API_KEY}}
      run: |
        mkdir -p ~/.gem
        touch ~/.gem/credentials
        cat > ~/.gem/credentials << EOF
        ---
        :rubygems_api_key: ${RUBYGEMS_API_KEY}
        EOF
        chmod 0600 ~/.gem/credentials
        gem signin
        mkdir tmp
        mv pkg/*musl.gem tmp
        for gem in pkg/*.gem; do gem push -V $gem; done
#        for gem in tmp/*.gem; do gem push -V $gem; done

#  test-rubygems-musl:
#    name: Test rubygems bindings on alpine-latest
#    if: contains(github.ref, 'refs/tags/v')
#    needs: release
#    continue-on-error: true
#    runs-on: ubuntu-latest
#    container:
#      image: alpine:latest

#    steps:
#    - name: Install packages
#      run: |
#        apk --no-cache --upgrade add git ruby-dev build-base autoconf

#    - run: git config --global --add safe.directory $(pwd)
#    - uses: actions/checkout@v3

#    - name: Install binary gem
#      run: gem install pngcheck -v $(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")

#    - name: Test
#      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

#  test-rubygems-gnu:
#    name: Test rubygems bindings on ubuntu-latest
#    if: contains(github.ref, 'refs/tags/v')
#    needs: release
#    continue-on-error: true
#    strategy:
#      fail-fast: false    
#      matrix:
#        ruby: [ '2.7', '3.0', '3.1' ]
#    runs-on: ubuntu-latest

#    steps:
#    - uses: actions/checkout@v3

#    - uses: ruby/setup-ruby@v1
#      with:
#        ruby-version: ${{ matrix.ruby }}
#        bundler-cache: false

#    - name: Install binary gem
#      run: gem install pngcheck -v $(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")

#    - name: Test
#      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"
