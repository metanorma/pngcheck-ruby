name: alpine-test-and-release.yml

on:
  push:
    branches: [ main ]
    tags:     [ 'v*' ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

jobs:
  test:
    name: test on Alpine-latest
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - run: gem install bundle
    - run: bundle install

    - run: bundle exec rake spec

  package:
    name: package on Alpine-latest
    needs: test
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev libpng-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - run: |
        gem install bundle
        bundle install
        bundle exec rake gem:native:x86_64-linux-musl
        bundle exec rake gem:native:any

    - uses: actions/upload-artifact@v2
      with:
        name: pkg
        path: pkg/*.gem

  test-binary-package:
    name: test binary package on Alpine-latest
    needs: package
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev build-base autoconf

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Install binary gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION")-$(ruby -e "puts RUBY_PLATFORM").gem

    - name: Test
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  test-ruby-package:
    name: test ruby platform package on Alpine-latest
    needs: package
    continue-on-error: false
    strategy:
      fail-fast: false    
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby-dev build-base autoconf zlib-dev

    - run: git config --global --add safe.directory $(pwd)
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Install ruby gem
      run: gem install -b pkg/pngcheck-$(ruby -I lib -r pngcheck/version -e "puts PngCheck::VERSION").gem

    - name: Test
      run:  ruby -rpngcheck -e "puts PngCheck.check_file('spec/examples/correct.png')"

  release:
    name: Release musl binary gem
    needs: [ test, test-binary-package, test-ruby-package ]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags/v')
    container:
      image: alpine:latest

    steps:
    - name: Install packages
      run: |
        apk --no-cache --upgrade add git ruby

    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: pkg
        path: pkg

    - name: Publish to rubygems.org
      env:
        RUBYGEMS_API_KEY: ${{secrets.METANORMA_CI_RUBYGEMS_API_KEY}}
      run: |
        mkdir -p ~/.gem
        touch ~/.gem/credentials
        cat > ~/.gem/credentials << EOF
        ---
        :rubygems_api_key: ${RUBYGEMS_API_KEY}
        EOF
        chmod 0600 ~/.gem/credentials
        gem signin
        for gem in pkg/*-musl.gem; do gem push -V $gem; done
